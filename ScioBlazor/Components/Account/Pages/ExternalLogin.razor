@page "/Account/ExternalLogin"
@attribute [AllowAnonymous]
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using ScioBlazor.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger

@code {
    public const string LoginCallbackAction = "LoginCallback";

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LoginCallbackAction)
        {
            await OnGetCallbackAsync();
        }
    }

    private async Task OnGetCallbackAsync()
    {
        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            RedirectManager.RedirectToWithStatus("/Account/Login", "Error loading external login information.", HttpContext);
        }

        // Try sign-in with existing external login
        var result = await SignInManager.ExternalLoginSignInAsync(info.LoginProvider, info.ProviderKey, isPersistent: false, bypassTwoFactor: true);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in with {LoginProvider} provider.", info.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo("/Account/Lockout");
        }
        if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("/Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = false });
        }

        // No account yet: auto-provision a user for Google-only flow
        var email = info.Principal.FindFirstValue(ClaimTypes.Email);
        if (string.IsNullOrWhiteSpace(email))
        {
            RedirectManager.RedirectToWithStatus("/Account/Login", "Google sign-in did not provide an email.", HttpContext);
        }

        var user = await UserManager.FindByEmailAsync(email);
        if (user is null)
        {
            user = new ApplicationUser { UserName = email, Email = email, EmailConfirmed = true };
            var createResult = await UserManager.CreateAsync(user);
            if (!createResult.Succeeded)
            {
                RedirectManager.RedirectToWithStatus("/Account/Login", $"Error creating user: {string.Join(", ", createResult.Errors.Select(e => e.Description))}", HttpContext);
            }
        }

        var addLoginResult = await UserManager.AddLoginAsync(user, info);
        if (!addLoginResult.Succeeded)
        {
            // The login may already be associated; try sign-in regardless
            Logger.LogWarning("AddLogin failed for {LoginProvider}. Proceeding to sign-in.", info.LoginProvider);
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }
}
