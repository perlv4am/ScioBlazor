@page "/calendar"
@attribute [Authorize]
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using ScioBlazor.Data
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext Db

<PageTitle>Můj kalendář</PageTitle>

<h1>Můj kalendář</h1>

@if (userId is null)
{
    <p>Načítám...</p>
}
else
{
    <div class="d-flex align-items-center mb-2">
        <button class="btn btn-outline-secondary me-2" @onclick="PrevMonth">‹</button>
        <div class="fs-5">@((new DateTime(displayYear, displayMonth, 1)).ToString("Y"))</div>
        <button class="btn btn-outline-secondary ms-2" @onclick="NextMonth">›</button>
    </div>

    <CalendarMonth Year="@displayYear"
                   Month="@displayMonth"
                   ReservedLocalDates="@reservedLocalDates"
                   HideDetails="false"
                   DayContent="@RenderOwnerDay" />
}

@code {
    private string? userId;
    private string? userEmail;
    private int displayYear;
    private int displayMonth;
    private IReadOnlyCollection<DateTime> reservedLocalDates = Array.Empty<DateTime>();
    private Dictionary<DateTime, List<EventVm>> byDay = new();
    private sealed record EventVm(DateTime Start, DateTime End, string Label, bool WithMe);

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = await UserManager.GetUserAsync(authState.User);
        userId = user?.Id;
        userEmail = user?.Email;
        var now = DateTime.Now;
        displayYear = now.Year;
        displayMonth = now.Month;
        if (userId is not null)
        {
            await LoadMonth();
        }
    }

    private async Task LoadMonth()
    {
        if (userId is null) return;
        var monthStartLocal = new DateTime(displayYear, displayMonth, 1, 0, 0, 0, DateTimeKind.Local);
        var monthStartUtc = monthStartLocal.ToUniversalTime();
        var nextUtc = monthStartUtc.AddMonths(1);
        var items = await (
            from m in Db.Meetings
            join u in Db.Users on m.OwnerId equals u.Id
            where m.StartUtc >= monthStartUtc && m.StartUtc < nextUtc
                  && ((m.OwnerId == userId) || (userEmail != null && m.AttendeeEmail == userEmail))
            orderby m.StartUtc
            select new
            {
                m.StartUtc,
                m.EndUtc,
                m.AttendeeName,
                OwnerFirst = u.FirstName,
                OwnerLast = u.LastName,
                OwnerUserName = u.UserName,
                WithMe = m.OwnerId == userId
            }
        ).ToListAsync();

        var projected = items.Select(x =>
        {
            var start = x.StartUtc.ToLocalTime();
            var end = x.EndUtc.ToLocalTime();
            string label;
            if (x.WithMe)
            {
                label = x.AttendeeName ?? "(nezadáno)";
            }
            else
            {
                if (!string.IsNullOrWhiteSpace(x.OwnerFirst) || !string.IsNullOrWhiteSpace(x.OwnerLast))
                {
                    var first = x.OwnerFirst ?? string.Empty;
                    var lastInitial = !string.IsNullOrWhiteSpace(x.OwnerLast) ? $" {x.OwnerLast![0].ToString().ToUpperInvariant()}." : string.Empty;
                    var composed = (first + lastInitial).Trim();
                    label = string.IsNullOrEmpty(composed) ? (x.OwnerUserName ?? "uživatel") : composed;
                }
                else
                {
                    label = x.OwnerUserName ?? "uživatel";
                }
            }
            return new EventVm(start, end, label, x.WithMe);
        });

        byDay = projected
            .GroupBy(x => x.Start.Date)
            .ToDictionary(g => g.Key, g => g.OrderBy(v => v.Start).ToList());

        reservedLocalDates = byDay.Keys.ToList();
        StateHasChanged();
    }

    private void PrevMonth()
    {
        var dt = new DateTime(displayYear, displayMonth, 1).AddMonths(-1);
        displayYear = dt.Year; displayMonth = dt.Month;
        _ = LoadMonth();
    }

    private void NextMonth()
    {
        var dt = new DateTime(displayYear, displayMonth, 1).AddMonths(1);
        displayYear = dt.Year; displayMonth = dt.Month;
        _ = LoadMonth();
    }

    private RenderFragment<DateTime> RenderOwnerDay => date => builder =>
    {
        if (byDay.TryGetValue(date.Date, out var list))
        {
            var seq = 0;
            foreach (var e in list)
            {
                builder.OpenElement(seq++, "div");
                var cls = e.WithMe ? "cal-event" : "cal-event cal-event-alt";
                builder.AddAttribute(seq++, "class", cls);
                var label = $"{e.Start:HH\\:mm}-{e.End:HH\\:mm}, {e.Label}";
                builder.AddContent(seq++, label);
                builder.CloseElement();
            }
        }
    };
}
