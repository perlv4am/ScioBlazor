@page "/s/{token}"
@attribute [AllowAnonymous]
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using ScioBlazor.Data
@using ScioBlazor.Utils
@using System.Security.Claims
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext Db
@inject NavigationManager Nav

<PageTitle>Sjednat schůzku</PageTitle>

@if (state == PageState.Loading)
{
    <p>Načítám...</p>
}

@code {
    private bool CanSelectDay(DateTime dateLocal)
    {
        var today = DateTime.Now.Date;
        if (dateLocal.Date <= today) return false;
        if (dateLocal.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday) return false;
        var holidays = CzechHolidays.GetForYear(dateLocal.Year);
        if (holidays.Contains(dateLocal.Date)) return false;
        var maxDate = today.AddMonths(2).Date;
        if (dateLocal.Date > maxDate) return false;
        if (dayMeetingCounts.TryGetValue(dateLocal.Date, out var count) && count >= 3) return false;
        return true;
    }

    private string OwnerShort()
    {
        var display = owner?.UserName ?? "uživatel";
        string first = display;
        string lastInitial = string.Empty;
        var parts = display.Split(' ', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        if (parts.Length >= 2)
        {
            first = parts[0];
            lastInitial = $" {parts[^1][0].ToString().ToUpperInvariant()}.";
        }
        return first + lastInitial;
    }

    // Helper to show user's name (First + Last initial) with fallbacks
    private string OwnerDisplayShort()
    {
        if (owner is not null && (!string.IsNullOrWhiteSpace(owner.FirstName) || !string.IsNullOrWhiteSpace(owner.LastName)))
        {
            var first = owner.FirstName ?? string.Empty;
            var lastInitial = !string.IsNullOrWhiteSpace(owner.LastName) ? $" {owner.LastName[0].ToString().ToUpperInvariant()}." : string.Empty;
            var result = (first + lastInitial).Trim();
            if (!string.IsNullOrEmpty(result)) return result;
        }

        // Fallback to username parsing (may be email)
        var display = owner?.UserName ?? "uživatel";
        string firstFallback = display;
        string lastInitialFallback = string.Empty;
        var parts = display.Split(' ', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
        if (parts.Length >= 2)
        {
            firstFallback = parts[0];
            lastInitialFallback = $" {parts[^1][0].ToString().ToUpperInvariant()}.";
        }
        return firstFallback + lastInitialFallback;
    }

    private RenderFragment<DateTime> RenderPersonalEvent => date => builder =>
    {
        if (personalMeetingDateLocal.HasValue && personalMeetingDateLocal.Value.Date == date.Date)
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "cal-event");
            builder.AddContent(2, $"Vaše schůzka s {OwnerDisplayShort()}");
            builder.CloseElement();
        }
    };

    private async Task OpenBooking(DateTime dateLocal)
    {
        selectedDateLocal = dateLocal.Date;
        selectedDurationMinutes = 30;
        bookingError = null;
        await LoadSlotsForSelectedDay();
        showModal = true;
        StateHasChanged();
    }

    private async Task LoadSlotsForSelectedDay()
    {
        slots.Clear();
        if (owner is null || selectedDateLocal is null) return;

        var fromLocal = selectedDateLocal.Value;
        var startUtc = new DateTime(fromLocal.Year, fromLocal.Month, fromLocal.Day, 0, 0, 0, DateTimeKind.Local).ToUniversalTime();
        var nextUtc = startUtc.AddDays(1);
        var dayMeetings = await Db.Meetings
            .Where(m => m.OwnerId == owner.Id && m.StartUtc >= startUtc && m.StartUtc < nextUtc)
            .OrderBy(m => m.StartUtc)
            .Select(m => new { m.StartUtc, m.EndUtc })
            .ToListAsync();

        var existing = dayMeetings
            .Select(m => (Start: m.StartUtc.ToLocalTime(), End: m.EndUtc.ToLocalTime()))
            .ToList();

        var open = fromLocal.Date.AddHours(9);
        var close = fromLocal.Date.AddHours(16);
        var currentCount = existing.Count;
        var capacityRemaining = Math.Max(0, 3 - currentCount);

        var duration = TimeSpan.FromMinutes(selectedDurationMinutes);
        for (var t = open; t.Add(duration) <= close; t = t.AddMinutes(15))
        {
            var slotStart = t;
            var slotEnd = t.Add(duration);
            var (available, reason) = IsSlotAvailable(slotStart, slotEnd, existing, capacityRemaining);
            slots.Add(new Slot(slotStart, slotEnd, available, reason));
        }
    }

    private static (bool ok, string? reason) IsSlotAvailable(DateTime start, DateTime end, List<(DateTime Start, DateTime End)> existing, int capacityRemaining)
    {
        if (capacityRemaining <= 0) return (false, "nedostupné");
        foreach (var m in existing)
        {
            var overlaps = start < m.End && end > m.Start;
            if (overlaps) return (false, "obsazeno");
            var gapBefore = (start - m.End).TotalMinutes;
            if (gapBefore >= 0 && gapBefore < 15) return (false, "nedostupné");
            var gapAfter = (m.Start - end).TotalMinutes;
            if (gapAfter >= 0 && gapAfter < 15) return (false, "nedostupné");
        }
        return (true, null);
    }

    private async Task OnDurationChanged(ChangeEventArgs e)
    {
        if (int.TryParse(Convert.ToString(e.Value), out var m))
        {
            selectedDurationMinutes = m;
            await LoadSlotsForSelectedDay();
        }
    }

    private async Task ConfirmBooking()
    {
        bookingError = null;
        if (owner is null || linkRef is null || selectedDateLocal is null || selectedSlotStartLocal is null)
        {
            bookingError = "Vyplňte prosím všechny údaje.";
            return;
        }
        var name = (attendeeFirst?.Trim() + " " + attendeeLast?.Trim()).Trim();
        if (string.IsNullOrWhiteSpace(name))
        {
            bookingError = "Zadejte jméno a příjmení.";
            return;
        }

        var duration = TimeSpan.FromMinutes(selectedDurationMinutes);
        var startLocal = selectedSlotStartLocal.Value;
        var endLocal = startLocal.Add(duration);
        var startUtc = DateTime.SpecifyKind(startLocal, DateTimeKind.Local).ToUniversalTime();
        var endUtc = DateTime.SpecifyKind(endLocal, DateTimeKind.Local).ToUniversalTime();

        var dayStartUtc = new DateTime(startLocal.Year, startLocal.Month, startLocal.Day, 0, 0, 0, DateTimeKind.Local).ToUniversalTime();
        var nextUtc = dayStartUtc.AddDays(1);

        var already = await Db.Meetings.AnyAsync(m => m.ShareLinkId == linkRef.Id);
        if (already)
        {
            state = PageState.AlreadyUsed;
            showModal = false;
            return;
        }

        var list = await Db.Meetings
            .Where(m => m.OwnerId == owner.Id && m.StartUtc >= dayStartUtc && m.StartUtc < nextUtc)
            .OrderBy(m => m.StartUtc)
            .ToListAsync();

        if (list.Count >= 3)
        {
            bookingError = "V tento den je již kapacita vyčerpána.";
            return;
        }

        if (startLocal.Date <= DateTime.Now.Date)
        {
            bookingError = "Nelze rezervovat na dnešek nebo do minulosti.";
            return;
        }
        if (startLocal.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday)
        {
            bookingError = "Nelze rezervovat o víkendu.";
            return;
        }
        var holidays = CzechHolidays.GetForYear(startLocal.Year);
        if (holidays.Contains(startLocal.Date))
        {
            bookingError = "Nelze rezervovat ve státní svátek.";
            return;
        }
        if (startLocal.Date > DateTime.Now.Date.AddMonths(2))
        {
            bookingError = "Lze rezervovat maximálně 2 měsíce dopředu.";
            return;
        }
        if (startLocal.TimeOfDay < TimeSpan.FromHours(9) || endLocal.TimeOfDay > TimeSpan.FromHours(16))
        {
            bookingError = "Schůzky jsou možné od 9:00 do 16:00.";
            return;
        }

        var existing = list.Select(m => (Start: m.StartUtc.ToLocalTime(), End: m.EndUtc.ToLocalTime())).ToList();
        var (ok, reason) = IsSlotAvailable(startLocal, endLocal, existing, 3 - list.Count);
        if (!ok)
        {
            bookingError = reason == "obsazeno" ? "Termín je obsazen." : "Termín není dostupný.";
            return;
        }

        var meeting = new Meeting
        {
            OwnerId = owner.Id,
            StartUtc = startUtc,
            EndUtc = endUtc,
            AttendeeName = name,
            ShareLinkId = linkRef.Id
        };
        Db.Meetings.Add(meeting);
        await Db.SaveChangesAsync();

        personalMeetingDateLocal = startLocal.Date;
        if (dayMeetingCounts.ContainsKey(startLocal.Date)) dayMeetingCounts[startLocal.Date]++;
        else dayMeetingCounts[startLocal.Date] = 1;

        // Refresh local calendar marking without reinitializing state
        monthlyCount += 1;
        reservedLocalDates = reservedLocalDates.Concat(new[] { startLocal.Date }).Distinct().ToList();
        showModal = false;
    }

    private sealed record Slot(DateTime StartLocal, DateTime EndLocal, bool Available, string? Reason);
}

@if (showModal)
{
    <div class="modal d-block" tabindex="-1" style="background: rgba(0,0,0,.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Sjednat schůzku - @selectedDateLocal?.ToString("d")</h5>
                    <button type="button" class="btn-close" @onclick="(() => showModal = false)"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Délka schůzky</label>
                        <select class="form-select" value="@selectedDurationMinutes" @onchange="OnDurationChanged">
                            <option value="30">30 min</option>
                            <option value="45">45 min</option>
                            <option value="60">1 hod</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <div class="form-label">Dostupné termíny</div>
                        @if (slots.Count == 0)
                        {
                            <div>Žádné dostupné termíny.</div>
                        }
                        else
                        {
                            @foreach (var s in slots)
                            {
                                var label = $"{s.StartLocal:HH\\:mm}-{s.EndLocal:HH\\:mm}" + (s.Available ? string.Empty : s.Reason == "obsazeno" ? " (obsazeno)" : " (nedostupné)");
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="slot" value="@s.StartLocal" disabled="@(!s.Available)" @onchange="_ => selectedSlotStartLocal = s.StartLocal" />
                                    <label class="form-check-label">@label</label>
                                </div>
                            }
                        }
                    </div>
                    <div class="row g-2">
                        <div class="col">
                            <label class="form-label">Jméno</label>
                            <input class="form-control" @bind-value="attendeeFirst" />
                        </div>
                        <div class="col">
                            <label class="form-label">Příjmení</label>
                            <input class="form-control" @bind-value="attendeeLast" />
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(bookingError))
                    {
                        <div class="text-danger mt-2">@bookingError</div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="(() => showModal = false)">Zavřít</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmBooking">Potvrdit</button>
                </div>
            </div>
        </div>
    </div>
}
else if (state == PageState.AlreadyUsed)
{
    <h1>Odkaz již byl použit</h1>
}
else if (state == PageState.NotFound)
{
    <h1>Odkaz nebyl nalezen</h1>
}
else if (state == PageState.RedirectOwner)
{
    <p>Přesměrování...</p>
}
else if (owner is not null)
{
    <h1>@HeaderText()</h1>
    <div class="d-flex align-items-center mb-2">
        <button class="btn btn-outline-secondary me-2" @onclick="PrevMonth" disabled="@(!CanPrevMonth())">‹</button>
        <div class="fs-5">@((new DateTime(displayYear, displayMonth, 1)).ToString("Y"))</div>
        <button class="btn btn-outline-secondary ms-2" @onclick="NextMonth" disabled="@(!CanNextMonth())">›</button>
    </div>
    <h2>Počet schůzek tento měsíc: @monthlyCount</h2>

    <div class="mt-3">
        <CalendarMonth Year="@displayYear"
                       Month="@displayMonth"
                       ReservedLocalDates="@reservedLocalDates"
                       HideDetails="true"
                       DayIsSelectable="@CanSelectDay"
                       OnDayClick="@OpenBooking"
                       DayContent="@RenderPersonalEvent" />
    </div>
}

@code {
    private enum PageState { Loading, Ok, NotFound, RedirectOwner, AlreadyUsed }

    private PageState state = PageState.Loading;
    private ApplicationUser? owner;
    private int monthlyCount;
    private int displayYear;
    private int displayMonth;
    private IReadOnlyCollection<DateTime> reservedLocalDates = Array.Empty<DateTime>();
    private Dictionary<DateTime, int> dayMeetingCounts = new();

    private ShareLink? linkRef;

    // Month navigation and data loading for public scheduling view
    private bool CanPrevMonth()
    {
        var currentMonthStart = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
        var prevStart = new DateTime(displayYear, displayMonth, 1).AddMonths(-1);
        return prevStart >= currentMonthStart;
    }

    private bool CanNextMonth()
    {
        var currentMonthStart = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
        var limitStart = currentMonthStart.AddMonths(2);
        var nextStart = new DateTime(displayYear, displayMonth, 1).AddMonths(1);
        return nextStart <= limitStart;
    }

    private async Task PrevMonth()
    {
        if (!CanPrevMonth()) return;
        var dt = new DateTime(displayYear, displayMonth, 1).AddMonths(-1);
        displayYear = dt.Year; displayMonth = dt.Month;
        await LoadDisplayMonth();
    }

    private async Task NextMonth()
    {
        if (!CanNextMonth()) return;
        var dt = new DateTime(displayYear, displayMonth, 1).AddMonths(1);
        displayYear = dt.Year; displayMonth = dt.Month;
        await LoadDisplayMonth();
    }

    private async Task LoadDisplayMonth()
    {
        if (owner is null) return;
        var monthStartLocal = new DateTime(displayYear, displayMonth, 1, 0, 0, 0, DateTimeKind.Local);
        var monthStartUtc = monthStartLocal.ToUniversalTime();
        var nextUtc = monthStartUtc.AddMonths(1);
        var monthMeetings = await Db.Meetings
            .Where(m => m.OwnerId == owner.Id && m.StartUtc >= monthStartUtc && m.StartUtc < nextUtc)
            .Select(m => m.StartUtc)
            .ToListAsync();

        reservedLocalDates = monthMeetings
            .Select(dt => dt.ToLocalTime().Date)
            .Distinct()
            .ToList();

        dayMeetingCounts = monthMeetings
            .Select(dt => dt.ToLocalTime().Date)
            .GroupBy(d => d)
            .ToDictionary(g => g.Key, g => g.Count());

        StateHasChanged();
    }

    // Booking state
    private bool showModal;
    private DateTime? selectedDateLocal;
    private int selectedDurationMinutes = 30;
    private string attendeeFirst = string.Empty;
    private string attendeeLast = string.Empty;
    private List<Slot> slots = new();
    private DateTime? selectedSlotStartLocal;
    private string? bookingError;
    private DateTime? personalMeetingDateLocal; // for rendering after booking

    [Parameter]
    public string? token { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(token)) { state = PageState.NotFound; return; }

        linkRef = await Db.ShareLinks.FirstOrDefaultAsync(x => x.Token == token);
        if (linkRef is null) { state = PageState.NotFound; return; }

        owner = await Db.Users.FirstOrDefaultAsync(u => u.Id == linkRef.OwnerId);
        if (owner is null) { state = PageState.NotFound; return; }

        // Single-use link check
        var linkUsed = await Db.Meetings.AnyAsync(m => m.ShareLinkId == linkRef.Id);
        if (linkUsed) { state = PageState.AlreadyUsed; return; }

        var authState = await AuthenticationStateTask;
        var currentUser = await UserManager.GetUserAsync(authState.User);
        if (currentUser?.Id == owner.Id)
        {
            state = PageState.RedirectOwner;
            Nav.NavigateTo("/calendar", true);
            return;
        }

        // Prefill attendee name for authenticated non-owner users
        if (authState.User?.Identity?.IsAuthenticated == true && currentUser is not null)
        {
            var given = authState.User.FindFirst(ClaimTypes.GivenName)?.Value;
            var family = authState.User.FindFirst(ClaimTypes.Surname)?.Value;

            if (!string.IsNullOrWhiteSpace(given)) attendeeFirst = given!;
            if (!string.IsNullOrWhiteSpace(family)) attendeeLast = family!;

            if (string.IsNullOrWhiteSpace(attendeeFirst) && !string.IsNullOrWhiteSpace(currentUser.FirstName)) attendeeFirst = currentUser.FirstName!;
            if (string.IsNullOrWhiteSpace(attendeeLast) && !string.IsNullOrWhiteSpace(currentUser.LastName)) attendeeLast = currentUser.LastName!;

            // Fallback: try to derive from username if it contains a space
            if ((string.IsNullOrWhiteSpace(attendeeFirst) || string.IsNullOrWhiteSpace(attendeeLast)) && !string.IsNullOrWhiteSpace(currentUser.UserName))
            {
                var parts = currentUser.UserName!.Split(' ', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
                if (parts.Length >= 2)
                {
                    if (string.IsNullOrWhiteSpace(attendeeFirst)) attendeeFirst = parts[0];
                    if (string.IsNullOrWhiteSpace(attendeeLast)) attendeeLast = parts[^1];
                }
            }
        }

        var now = DateTime.UtcNow;
        var monthStart = new DateTime(now.Year, now.Month, 1, 0, 0, 0, DateTimeKind.Utc);
        var nextMonth = monthStart.AddMonths(1);
        monthlyCount = await Db.Meetings
            .Where(m => m.OwnerId == owner.Id && m.StartUtc >= monthStart && m.StartUtc < nextMonth)
            .CountAsync();

        // Prepare calendar inputs (rendered by local date for hatching)
        displayYear = monthStart.ToLocalTime().Year;
        displayMonth = monthStart.ToLocalTime().Month;
        var monthMeetings = await Db.Meetings
            .Where(m => m.OwnerId == owner.Id && m.StartUtc >= monthStart && m.StartUtc < nextMonth)
            .Select(m => m.StartUtc)
            .ToListAsync();
        reservedLocalDates = monthMeetings
            .Select(dt => dt.ToLocalTime().Date)
            .Distinct()
            .ToList();

        dayMeetingCounts = monthMeetings
            .Select(dt => dt.ToLocalTime().Date)
            .GroupBy(d => d)
            .ToDictionary(g => g.Key, g => g.Count());

        state = PageState.Ok;
    }

        private string HeaderText()
    {
        return $"Sjednat schůzku s uživatelem {OwnerDisplayShort()}";
    }
}
